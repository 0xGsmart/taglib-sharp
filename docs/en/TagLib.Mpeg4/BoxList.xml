<Type Name="BoxList" FullName="TagLib.Mpeg4.BoxList">
  <TypeSignature Language="C#" Value="public class BoxList : System.Collections.Generic.List&lt;TagLib.Mpeg4.Box&gt;" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>1.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.Generic.List&lt;TagLib.Mpeg4.Box&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TagLib.Mpeg4.Box</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoxList ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Mpeg4.BoxList" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public TagLib.Mpeg4.Box Get (TagLib.ByteVector type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Mpeg4.Box</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="TagLib.ByteVector" /> specifying what type of box to get.</param>
        <summary>Gets a box of a given type.</summary>
        <returns>A <see cref="T:TagLib.Mpeg4.Box" /> containing the box that was found, or <see langword="null" /> if none is found.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public TagLib.Mpeg4.Box Get (Type type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Mpeg4.Box</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="System.Type" /> specifying what type of box to get.</param>
        <summary>Gets a box of a given type.</summary>
        <returns>A <see cref="T:TagLib.Mpeg4.Box" /> containing the box that was found, or <see langword="null" /> if none is found.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetRecursively">
      <MemberSignature Language="C#" Value="public TagLib.Mpeg4.Box GetRecursively (TagLib.ByteVector type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Mpeg4.Box</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="TagLib.ByteVector" /> specifying what type of box to get.</param>
        <summary>Gets the highest level box of a given type by searching recursively.</summary>
        <returns>A <see cref="T:TagLib.Mpeg4.Box" /> containing the box that was found, or <see langword="null" /> if none is found.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetRecursively">
      <MemberSignature Language="C#" Value="public TagLib.Mpeg4.Box GetRecursively (Type type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Mpeg4.Box</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="System.Type" /> specifying what type of box to get.</param>
        <summary>Gets the highest level box of a given type by searching recursively.</summary>
        <returns>A <see cref="T:TagLib.Mpeg4.Box" /> containing the box that was found, or <see langword="null" /> if none is found.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveByType">
      <MemberSignature Language="C#" Value="public void RemoveByType (TagLib.ByteVector type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="TagLib.ByteVector" /> specifying what type of box to remove.</param>
        <summary>Removes all boxes of a given type from the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveByType">
      <MemberSignature Language="C#" Value="public void RemoveByType (Type type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="System.Type" /> specifying what type of box to remove.</param>
        <summary>Removes all boxes of a given type from the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This class provides methods for manipulating a list of boxes.</summary>
    <remarks />
  </Docs>
</Type>
