<Type Name="File" FullName="TagLib.NonContainer.File">
  <TypeSignature Language="C#" Value="public abstract class File : TagLib.File" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>1.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TagLib.File</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public File (string file, TagLib.ReadStyle properties_style);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="properties_style" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="file">A file name relevant to the current <see cref="T:TagLib.File+FileAbstractionCreator" />. By default this is a standard operating system path.</param>
        <param name="properties_style">A <see cref="T:TagLib.ReadStyle" /> specifying how to read media properties from the file.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.NonContainer.File" /> for a given filename and read style.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public File (string file);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">A file name relevant to the current <see cref="T:TagLib.File+FileAbstractionCreator" />. By default this is a standard operating system path.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Riff.File" /> for a given filename.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReadStart">
      <MemberSignature Language="C#" Value="protected virtual void ReadStart (long start, TagLib.ReadStyle style);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int64" />
        <Parameter Name="style" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEnd">
      <MemberSignature Language="C#" Value="protected virtual void ReadEnd (long end, TagLib.ReadStyle style);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="end" Type="System.Int64" />
        <Parameter Name="style" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="end">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProperties">
      <MemberSignature Language="C#" Value="protected abstract TagLib.Properties ReadProperties (long start, long end, TagLib.ReadStyle style);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Properties</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int64" />
        <Parameter Name="end" Type="System.Int64" />
        <Parameter Name="style" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTag">
      <MemberSignature Language="C#" Value="protected TagLib.NonContainer.StartTag StartTag { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.NonContainer.StartTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTag">
      <MemberSignature Language="C#" Value="protected TagLib.NonContainer.EndTag EndTag { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.NonContainer.EndTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This abstract class is used to access tagging and properties for files which contain an indeterminite number and type of tags at their beginning or end.</summary>
    <remarks />
  </Docs>
</Type>
